#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author_Email: xextreme AT aliyun.com
# __author__ = 'xExtreme'

from django.utils.translation import ugettext_lazy as _
from django.utils import timezone
from django.db import models
from django.contrib.auth.models import (
    BaseUserManager, AbstractBaseUser
)

from accounts.models.department import Department
from cmdb.models.asset import VirtualGroup
from cmdb.models.vmasset import VmAsset


class UserProfileManager(BaseUserManager):
    def create_user(self, email, phone, username, password=None):
        """
        Creates and saves a User with the given email, date of
        birth and password.
        """
        if not email:
            raise ValueError('Users must have an email address')
        
        user = self.model(
            email=self.normalize_email(email),
            username=username,
            phone=phone,
        )
        user.is_staff = True
        user.valid_end_time = '2046-12-12 12:12:12.000000'
        user.set_password(password)
        user.save(using=self._db)
        return user
    
    def create_superuser(self, email, phone, username, password):
        """
        Creates and saves a superuser with the given email, date of
        birth and password.
        """
        user = self.create_user(email,
                                password=password,
                                phone=phone,
                                username=username,
                                )
        user.is_active = True
        user.is_terminal = True
        user.is_admin = True
        user.save(using=self._db)
        return user


class UserProfile(AbstractBaseUser):
    email = models.EmailField(blank=True, max_length=255, unique=True, verbose_name=_('email address'))
    username = models.CharField(max_length=32, blank=True, null=True, verbose_name='用户名')
    is_staff = models.BooleanField(_('staff status'), default=False, help_text=_('Designates whether the user can log into this admin site.'))
    is_active = models.BooleanField(_('active'), default=True, help_text=_(
        'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'))
    is_admin = models.BooleanField(default=False, verbose_name="管理员", help_text='是否管理员')
    is_terminal = models.BooleanField(default=False, verbose_name="终端开启", help_text=_('Terminal'))
    
    name = models.CharField(max_length=32, blank=True, null=True, verbose_name='姓名')
    phone = models.BigIntegerField(unique=True, blank=True, null=True, verbose_name=_("mobile phone"))
    wechat = models.CharField(max_length=32, blank=True, verbose_name=_('Wechat'))
    department = models.ForeignKey(Department, on_delete=models.SET_NULL, null=True, blank=True, verbose_name=u'所属部门')
    vmgroup = models.ManyToManyField(VirtualGroup, verbose_name=u'授权服务器主机组', blank=True)
    vmasset = models.ManyToManyField(VmAsset, verbose_name=u'授权服务器主机', blank=True)
    duties = models.CharField(max_length=64, null=True, verbose_name='用户职务备注', help_text='用户职务备注')
    date_joined = models.DateTimeField(_('date joined'), editable=True, auto_now=True)
    valid_begin_time = models.DateTimeField(auto_now=True, editable=True, verbose_name='起始时间')
    valid_end_time = models.DateTimeField(default=timezone.now, editable=True, verbose_name='截止时间')
    
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['phone', 'username']
    
    objects = UserProfileManager()
    
    def get_short_name(self):
        # The user is identified by their username
        return self.email
    
    def get_full_name(self):
        return self.email
    
    def get_email(self):
        # The user is identified by their email address
        return self.email
    
    def get_phone(self):
        # The user is identified by their email address
        return self.phone
    
    def __str__(self):  # __unicode__ on Python 2
        return self.email
    
    def has_perm(self, perm, obj=None):
        "Does the user have a specific permission?"
        # Simplest possible answer: Yes, always
        return True
    
    def has_module_perms(self, app_label):
        "Does the user have permissions to view the app `app_label`?"
        # Simplest possible answer: Yes, always
        return True
    
    # @property
    # def is_staff(self):
    #     "Is the user a member of staff?"
    #     # Simplest possible answer: All admins are staff
    #     return self.is_admin
    
    class Meta:
        ordering = ['id']
        db_table = 'account_userprofile'
        verbose_name = '管理账户'
        verbose_name_plural = '管理账户'
        permissions = (
            ('web_access_dashboard', '可以访问 审计主页'),
            ('web_batch_cmd_exec', '可以访问 批量命令执行页面'),
            ('web_batch_batch_file_transfer', '可以访问 批量文件分发页面'),
            ('web_config_center', '可以访问 堡垒机配置中心'),
            ('web_config_items', '可以访问 堡垒机各配置列表'),
            ('web_invoke_admin_action', '可以进行admin action执行动作'),
            ('web_table_change_page', '可以访问 堡垒机各配置项修改页'),
            ('web_table_change', '可以修改 堡垒机各配置项'),
        )
